This files purpose is to give an insight how tasks are handled in the autosub system and give you information how to
create a task. 

For VHDL, tasks can be created using the vhdl task creator tool (tasks/tools/vhdl_task_creator , further instructions 
in the usermanual)

All files of a task should be stored in one directory, the minimal structure of a task is:
1) A generator executable
2) A tester executable
3) A description.txt
located in a directory

Their duty is in a nutshell:
- The generator has to create the individual task and the needed files, which are sent to the user.
- The tester takes files the user has sent in as a solution, tests the solution and reports if it was right or wrong.
- The description.txt is the body text of the email, which is sent to a user with a new task.

Parameters for the executables
------------------------------
The generator gets the following parameters in ordered sequence:
- UserId : The UserId of the user the task has to be generated for.
- TaskNr : The TaskNr the system has assigned for this task.
- Submission Email : The configured email address to which users send their emails.
- Mode : The task mode, currently used: normal or exam
- SemesterDB : Path to the semester database of the system
- Language : Parameter to specify in which human language the task description shall be created.

The tester gets the following parameters in ordered sequence:
- UserId : The UserId of the user the task has to be generated for.
- TaskNr : The TaskNr the system has assigned for this task.
- TaskParameters : The string which is associated as parameter for a unique version of the task.
- BackendInterfaceFile : A file containing functions to control a chosen backend. 

Minimal needed actions of the executables
-----------------------------------------
Generator: Has to call the autosub/src/tools/python3 add_to_usertasks.py with UserId, TaskNr, TaskParameters, list of
           task attachments and path to semester database to register a generated task with the system.

Tester: - Has to return the result of the testing of the user's solution for the task:
          3 something went/is wrong with test generation
          1 solution syntax or behavior wrong
          0 solution right behavior
        - If not returning 0, has to create and fill the error_msg file in the user's Task directory, which will be sent
          as text body via email to the user.

Proposed structure for tasks
----------------------------
To implement the tasks in an uniform way, the following additional structures are advised:
- Directory "scripts": Scripts that are called from the executables in order to aid the generation or test process.
- Directory "templates": Files have to be filled with parameters and can be used to generate files for the users or test
                         process.
- Directory "static": Files which are static for the task, therefore the same for every individual task.
- Directory "exam": Files that are needed for the exam mode.

Example implementation process for a VHDL task
----------------------------------------------
Implementation of a VHDL task includes the following steps:
- Creating template & static files which can be filled to create: A individual task description pdf, entity
  declarations, behavior file barebone.
- Create the generator executable, which fills the templates, creates a task parameter string and registers the new task
  with the system.
- Create a testbench template.
- Create a tester executable, which fills the testbench template and executes the testing process.

The implementation can for example lead to the following sequences:

A sequence for the task generation:
- The generator executable is called by the autosub generator thread.
- The generator executable calls a task generation script "scripts/generateTask.py".
- The task generation script generates random task parameters and returns them, fills a LaTeX description template and 
  vhdl templates and stores the results in the directory "tmp/".
- The generator executable generates the task description pdf file from the filled template and copies it, all filled 
  vhdl files and static vhdl files to the users task description path "autosub/users/<user_id>/Task<task_nr>/desc/".
- The generator executable executes "autosub/src/tools/add_to_usertask.py" to register the task with the system.

The sequence for testing:
- The tester executable is called by a autosub worker thread.
- The tester executable calls a testbench generation script "scripts/generateTestBench.py".
- The tesbench generation script creates a testbench with the testbench templates with test vectors and returns it.
- The tester executable stores the testbench and copies needed files from the task description in the taks directory 
  "austosub/users/<user_id>/Task<task_nr>"
- The tester executable checks if the appropiate submission files are present. These files are copied to the 
  user- task- folder by the fetcher thread.
- The tester executable analyzes files generated by the task generation, if errors occur the process stops and returns
  an error code.
- The tester executable analyzes the student submission files, if errors occur they are written to a error_msg file and 
  returns an error code.
- The tester executable elaborates and runs the testbench, if the tests fail meaningful messages are written to a 
  error_msg and returns an error code.
- If the test was a success: the tester returns success.
